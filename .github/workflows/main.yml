# This is a basic workflow to help you get started with Actions

name: Flutter CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ main, master, feature/*, hotfixes/* ]
  pull_request:
    branches: [ main, master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2.1.0
    - uses: actions/setup-java@v1.3.0
      with:
        java-version: '12.x'
    - uses: subosito/flutter-action@v1.3.1
      with:
        channel: 'stable' # 'dev', 'alpha', default to: 'stable'
        flutter-version: '1.20.4' # you can also specify exact version of flutter

    # Get flutter dependencies.
    - run: flutter pub get
      #working-directory: ./app

    # Check for any formatting issues in the code.
    # - run: flutter format --set-exit-if-changed .
    #   working-directory: ./app

    # Statically analyze the Dart code for any errors.
    # - run: flutter analyze .
    #   working-directory: ./app

    # Run widget tests for our flutter project.
    # - run: flutter test
    #   working-directory: ./app
    
    # Build debug apk.
    - run: flutter build apk --debug -v
      #working-directory: ./app
    
    # Build apk.
#     - run: flutter build apk --release -v
#       working-directory: ./app

    # Upload generated apk to the artifacts.
    - uses: actions/upload-artifact@v1
      with:
        name: release-apk-harrison
        path: android/build/app/outputs/apk/release/app-debug.apk
